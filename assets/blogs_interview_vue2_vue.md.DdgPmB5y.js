import{_ as a,c as i,o as l,a5 as o}from"./chunks/framework.PZKd_Vnq.js";const v=JSON.parse('{"title":"说说你对vue的理解?","description":"","frontmatter":{"title":"说说你对vue的理解?","date":"2022-01-20 08:00:00","categories":["前端","Vue"],"tags":["前端","Vue"],"publish":false},"headers":[],"relativePath":"blogs/interview/vue2/vue.md","filePath":"blogs/interview/vue2/vue.md","lastUpdated":1746002662000}'),d={name:"blogs/interview/vue2/vue.md"};function c(t,e,r,u,n,h){return l(),i("div",{"data-pagefind-body":!0},e[0]||(e[0]=[o('<h2 id="vue是什么" tabindex="-1">vue是什么 <a class="header-anchor" href="#vue是什么" aria-label="Permalink to &quot;vue是什么&quot;">​</a></h2><p>Vue.js（/vjuː/，或简称为Vue）是一个用于创建用户界面的开源JavaScript框架，也是一个创建单页应用的Web应用框架。Vue所关注的核心是MVC模式中的视图层，同时，它也能方便地获取数据更新，并通过组件内部特定的方法实现视图与模型的交互</p><h2 id="vue核心特性" tabindex="-1">Vue核心特性 <a class="header-anchor" href="#vue核心特性" aria-label="Permalink to &quot;Vue核心特性&quot;">​</a></h2><h3 id="数据驱动-mvvm" tabindex="-1">数据驱动（MVVM) <a class="header-anchor" href="#数据驱动-mvvm" aria-label="Permalink to &quot;数据驱动（MVVM)&quot;">​</a></h3><p><code>MVVM</code>表示的是 <code>Model-View-ViewModel</code></p><ul><li>Model：模型层，负责处理业务逻辑以及和服务器端进行交互</li><li>View：视图层：负责将数据模型转化为UI展示出来，可以简单的理解为HTML页面</li><li>ViewModel：视图模型层，用来连接Model和View，是Model和View之间的通信桥梁</li></ul><h3 id="组件化" tabindex="-1">组件化 <a class="header-anchor" href="#组件化" aria-label="Permalink to &quot;组件化&quot;">​</a></h3><ul><li>什么是组件化一句话来说就是把图形、非图形的各种逻辑均抽象为一个统一的概念（组件）来实现开发的模式，在<code>Vue</code>中每一个<code>.vue</code>文件都可以视为一个组件</li><li>组件化的优势 <ul><li>降低整个系统的耦合度，在保持接口不变的情况下，我们可以替换不同的组件快速完成需求，例如输入框，可以替换为日历、时间、范围等组件作具体的实现</li><li>调试方便，由于整个系统是通过组件组合起来的，在出现问题的时候，可以用排除法直接移除组件，或者根据报错的组件快速定位问题，之所以能够快速定位，是因为每个组件之间低耦合，职责单一，所以逻辑会比分析整个系统要简单</li><li>提高可维护性，由于每个组件的职责单一，并且组件在系统中是被复用的，所以对代码进行优化可获得系统的整体升级</li></ul></li></ul><h3 id="指令系统解释-指令-directives-是带有-v-前缀的特殊属性作用-当表达式的值改变时-将其产生的连带影响-响应式地作用于-dom" tabindex="-1">指令系统解释：指令 (Directives) 是带有 v- 前缀的特殊属性作用：当表达式的值改变时，将其产生的连带影响，响应式地作用于 DOM <a class="header-anchor" href="#指令系统解释-指令-directives-是带有-v-前缀的特殊属性作用-当表达式的值改变时-将其产生的连带影响-响应式地作用于-dom" aria-label="Permalink to &quot;指令系统解释：指令 \\(Directives\\) 是带有 v- 前缀的特殊属性作用：当表达式的值改变时，将其产生的连带影响，响应式地作用于 DOM&quot;">​</a></h3><ul><li>常用的指令 <ul><li>条件渲染指令 <code>v-if</code></li><li>列表渲染指令<code>v-for</code></li><li>属性绑定指令<code>v-bind</code></li><li>事件绑定指令<code>v-on</code></li><li>双向数据绑定指令<code>v-model</code></li></ul></li></ul><h2 id="vue跟传统开发的区别" tabindex="-1">Vue跟传统开发的区别 <a class="header-anchor" href="#vue跟传统开发的区别" aria-label="Permalink to &quot;Vue跟传统开发的区别&quot;">​</a></h2><ul><li>Vue所有的界面事件，都是只去操作数据的，Jquery操作DOM</li><li>Vue所有界面的变动，都是根据数据自动绑定出来的，Jquery操作DOM</li></ul><h2 id="vue和react对比" tabindex="-1">Vue和React对比 <a class="header-anchor" href="#vue和react对比" aria-label="Permalink to &quot;Vue和React对比&quot;">​</a></h2><h3 id="相同点" tabindex="-1">相同点 <a class="header-anchor" href="#相同点" aria-label="Permalink to &quot;相同点&quot;">​</a></h3><ul><li>都有组件化思想</li><li>都支持服务器端渲染</li><li>都有Virtual DOM（虚拟dom）</li><li>数据驱动视图</li><li>都有支持native的方案：<code>Vue</code>的<code>weex</code>、<code>React</code>的<code>React native</code></li><li>都有自己的构建工具：<code>Vue</code>的<code>vue-cli</code>、<code>React</code>的<code>Create React App</code></li></ul><h3 id="区别" tabindex="-1">区别 <a class="header-anchor" href="#区别" aria-label="Permalink to &quot;区别&quot;">​</a></h3><ul><li>数据流向的不同。<code>react</code>从诞生开始就推崇单向数据流，而<code>Vue</code>是双向数据流</li><li>数据变化的实现原理不同。<code>react</code>使用的是不可变数据，而<code>Vue</code>使用的是可变的数据</li><li>组件化通信的不同。<code>react</code>中我们通过使用回调函数来进行通信的，而<code>Vue</code>中子组件向父组件传递消息有两种方式：事件和回调函数</li><li>diff算法不同。<code>react</code>主要使用diff队列保存需要更新哪些DOM，得到patch树，再统一操作批量更新DOM。<code>Vue</code> 使用双向指针，边对比，边更新DOM</li></ul>',17)]))}const V=a(d,[["render",c]]);export{v as __pageData,V as default};
